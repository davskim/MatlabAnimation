fig = figure;

xdat = 1:200;
ydat = sin(xdat/20);

plot(xdat,ydat);


%%
fig = figure;
ax = plot(1,1,'o');
xlim([0,2])
ylim([0,2])

set(ax,'XData',1.5,'YData',1)

%%
fig = figure;
ax = plot(1,1,'o');
xlim([0,2])
ylim([0,2])

for i = 1:100
    set(ax,'XData',1+(i/100),'YData',1+(i/100))
    drawnow
end

%% Make the point move logistically 

fig = figure;
ax = plot(1,1,'o');
xlim([0,3])
ylim([0,3])

frames = 100;
for i = 1:frames
    dist = 1 / (1 + 2^(20*(-2*(i/frames) + .35)));
    set(ax,'XData',1+dist,'YData',1+dist)
    drawnow
end


%% Make the point move asymptotically 

fig = figure;
ax = plot(1,1,'o');
xlim([0,3])
ylim([0,3])

frames = 100;
c = 15;
for i = 1:frames
    dist = (1+(1/c)) - ((c+1)/(c*(c*(i/frames) + 1)));
    set(ax,'XData',1+dist,'YData',1+dist)
    drawnow
end


%% Using a function
figure;
ax = plot(1,1,'o');
xlim([0,3])
ylim([0,3])

pointtween(ax,[.4,.2],[2,2.9])



%% Trying to tween functions now... This will be kinda hard...

figure;
x = [(1:300) / 100]';
y = sin(5*x);

ax = plot(x,y,'o');

xlim([0,3])
ylim([-3,3])

while 1
    functween(ax,[x,y],[x,3*y])
    functween(ax,[x,3*y],[x,y])
    functween(ax,[x,y],[x,sin(10*x)])
    functween(ax,[x,sin(10*x)],[x,1.5*sin(12*x)])
    functween(ax,[x,1.5*sin(12*x)],[x,y])
    functween(ax,[x,y],[cos(linspace(0,2*pi,300)')+1.5,sin(linspace(0,2*pi,300)')*2])
    functween(ax,[cos(linspace(0,2*pi,300)')+1.5,sin(linspace(0,2*pi,300)')*2],[x,y])
end

%% let's try to pan the axis now...
figure;
x = [(1:300) / 100]';
y = sin(5*x);

ax = plot(x,y,'o');

xlim([0,3])
ylim([-3,3])

while 1
    panCam(ax,[-1,4;-4,4])
    panCam(ax,[-1,1;-3,3])
    panCam(ax,[-5,5;-5,5])
    panCam(ax,[0,3;-3,3])
end

%% Let's combine
figure;
x = [(1:300) / 100]';
y = sin(5*x);

ax = plot(x,y,'o');

xlim([0,3])
ylim([-3,3])

while 1
    panCam(ax,[-1,4;-4,4])
    functween(ax,[x,y],[x,3*y])
    panCam(ax,[-1,1;-3,3])
    panCam(ax,[0,5;-5,5])
    functween(ax,[x,3*y],[5*x,2*y])
    functween(ax,[5*x,2*y],[cos(linspace(0,2*pi,300)')+1.5,sin(linspace(0,2*pi,300)')*2])
    panCam(ax,[0,3;-3,3])
    functween(ax,[cos(linspace(0,2*pi,300)')+1.5,sin(linspace(0,2*pi,300)')*2],[x,y])
end

%% I want to create a differnt kind of tween
% instead of having all of the points move at once, I want them all to move
% one at a time... This will be hard though because.. they need to be
% staggered in movement... I can't just fully animate one point at a
% time...

figure;
x = [(1:300) / 100]';
y = sin(5*x);
ax = plot(x,y,'o');
xlim([0,3])
ylim([-3,3])

while 1
    Sandfunctween(ax,[x,y],[x,3*y])
end

%% Okay, this techincally works, but it's god awfully slow...
% Oh! What about predetermining the path of every tween FIRST! And then
% staggering them? After that, we can just loop through the new data and
% animate!
figure;
x = [(1:300) / 100]';
y = sin(5*x);
ax = plot(x,y,'o');
xlim([0,3])
ylim([-3,3])

while 1
    Cascadefunctween(ax,[x,y],[x,3*y]);
    Cascadefunctween(ax,[x,3*y],[x,y]);
    panCam(ax,[0,3;0,9]);
    Cascadefunctween(ax,[x,3*x]);
    panCam(ax,[0,3;-3,3])
    Cascadefunctween(ax,[x,y]);
end

%% Okay, now how about we augment the Cascade functween to have multiple plots?
% how in the hell do I do this? Multithreading? Nah... Probably not. I
% don't want it to get that complicated... I'll start with something
% simple... I'll pass in two ax objects in a cell... I'll pass in the same
% thing with the startfunc and endfunc variables... a 2x1 cell that have
% two columns each...
figure;
x = [(1:300) / 100]';
y = sin(5*x);
ax = plot(x,y,'o');
hold on;
ax2 = plot(x,sin(10*x),'o');
xlim([0,3])
ylim([-3,3])

MultiCascade({ax,ax2},{[x,1.5*y],[x,3*y]});

%% HOLY SHIT that worked. Let's see if this works with everything...
figure;
x = [(1:300) / 100]';
y = sin(5*x);
ax = plot(x,y,'o');
hold on;
ax2 = plot(x,sin(10*x),'o');
ax3 = plot(x,x*1.2,'o');
xlim([0,3])
ylim([-3,3])

axcell = {ax,ax2,ax3};
while 1
    MultiCascade(axcell,{[x,2*sin(12*x)],[x,3*sin(x)],[x,1.5*sin(4*x)]})
    panCam(ax,[-3,3;-3,3])
    MultiCascade(axcell,{[cos(linspace(0,2*pi,300)')*2,sin(linspace(0,2*pi,300)')*2], ...
        [cos(linspace(0,2*pi,300)')*.5,sin(linspace(0,2*pi,300)')*.5], ...
        [cos(linspace(0,2*pi,300)'),sin(linspace(0,2*pi,300)')]})
    panCam(ax,[0,3;-3,3])
end

%% Transforming contiguous SVGs
figure;
x = [(1:300) / 100]';
y = sin(5*x);
ax = plot(x,y,'o');
hold on;
ax2 = plot(x,sin(10*x),'o');
ax3 = plot(x,x*1.2,'o');
xlim([0,3])
ylim([-3,3])
svg = loadsvg('test.svg',.99,0);
svg = interpolateCurve(svg{1,1},length(x));
% Let's normalize to a -3,3 grid... Wait... I can just zscore conveniently
% LMFAOOOOO THAT WORKED HOLY SHIT
svg = zscore(svg,0,1)


axcell = {ax,ax2,ax3};
while 1
    MultiCascade(axcell,{[x,2*sin(12*x)],[x,3*sin(x)],[x,1.5*sin(4*x)]})
    panCam(ax,[-3,3;-3,3])
    MultiCascade(axcell,{[cos(linspace(0,2*pi,300)')*2,sin(linspace(0,2*pi,300)')*2], ...
        [cos(linspace(0,2*pi,300)')*.5,sin(linspace(0,2*pi,300)')*.5], ...
        [cos(linspace(0,2*pi,300)'),sin(linspace(0,2*pi,300)')]})
    MultiCascade(axcell,{svg,1.5*svg,2*svg})
    panCam(ax,[0,3;-3,3])
    MultiCascade(axcell,{[x,2*sin(12*x)],[x,3*sin(x)],[x,1.5*sin(4*x)]})
end

%% Testing with previous functions
figure;
x = linspace(-3,3,300);
y = sin(5*x);
ax = plot(x,y,'o');
xlim([-3,3])
ylim([-3,3])
svg = loadsvg('test.svg',.99,0);
svg = interpolateCurve(svg{1,1},length(x));
svg = zscore(svg,0,1)

while 1
    functween(ax,svg)
    pause(1)
    Cascadefunctween(ax,[x(:),y(:)])
    pause(1)
end

%% Okay, now I want to see how it works with a multiple part SVG
% Oh weird... It can only import illustrator brush strokes... It can't do
% penstrokes...
face = readSVG('multipart.svg',1000);
face = zscore(face,0,1);
x = linspace(-3,3,1000)';

figure;
ax = plot(x,sin(5*x),'o');
xlim([-3,3])
ylim([-3,3])
while 1 
    functween(ax,[x(:),sin(5*x)]);
    pause(1)
    functween(ax,face);
    pause(1)
end

%% I wanna make something with this now...
% Shall we try... I don't know... Splitting a ephys signal into different
% parts? Something spikesortingy? I originally wanted to use this to
% explain PCA, but... Hmmm... I think I need to get better functionality to
% actually get something as beautiful as I think 3b1b's videos are...

filepath = 'D:\15minNZ\sim_binary.dat';
bin = bz_LoadBinary(filepath,'frequency',20000,'nChannels',32);

figure; 
chans = [3,4,5,6];
for i = 1:4
    subplot(4,1,i);
    plot(bin(10000:15000,chans(i)));
    axis tight;
    ylim([-1500,1500])
end

%% Making some cool stuff...
subdat = bin(10000:15000,3:6);
thisguy = NormPlot(subdat(:,1),2000);

ax = canvas(thisguy,[],[-6,6],'-')
while 1
    LineDraw(ax,NormPlot(subdat(:,2),2000));
    pause(1)
    functween(ax,NormPlot(subdat(:,3),2000));
    pause(1)
    functween(ax,NormPlot(subdat(:,4),2000));
    pause(1)
    functween(ax,NormPlot(subdat(:,1),2000));
    pause(1)
end

%% Let's try using spmd and parallel computing...
%parpool(2)

%% This might get a bit chaotic and indeterminant...
% Wait. I'm not sure if this works... I might not be able to use this after
% all... Ah well...


% ax = canvas(thisguy,'-')
% while 1
% spmd
%     functween(ax,NormPlot(subdat(:,2),2000));
%     pause(1)
%     functween(ax,NormPlot(subdat(:,3),2000));
%     pause(1)
%     functween(ax,NormPlot(subdat(:,4),2000));
%     pause(1)
%     functween(ax,NormPlot(subdat(:,1),2000));
%     pause(1)
% end
%     panCam(ax,[-4,4;-6,6])
%     panCam(ax,[-3,3;-5,5])
% end

%% I really need to try to integrate doing multiple things at once...
% For instance, I need to be able to continuously transform objects WHILE
% having something that is animating on a different layer... This sounds
% really REALLY tough...
%
% OH WAIT! What if i weaved the PREDETERMINED PATHS of each object???

%% As a quick aside, maybe I should actually use it to develop my own intuition...
% Let's visualize a linear transformation
x = (rand(1,50) -.5 ) * 2.5;
y = (rand(1,50) -.5 ) * 2.5;
ax = canvas([x(:),y(:)],'o')

while 1
    xlim(ax.Parent,[-3,3])
    ylim(ax.Parent,[-3,3])
    set(ax,'XData',x,'YData',y)
    pause(.5)
    panCam(ax,[-6,6;-6,6])
    pause(1)
    functween(ax,[x(:),y(:)],([3,2;1,2]*[x(:),y(:)]')')
    pause(1)

end

%% Okay, this is pretty nice visualization, but I would also like a line to
% be drawn along the eigenvectors... I guess I'd have to animate lines,
% huh? That... Hmmm... I hope that isn't too hard... Should I just go
% through and modify transparencies? Or should I append data? Eh... Let's
% go transparencies... Oh... Matlab doesn't support that right now. Bummer.

x = linspace(-2.5,2.5,3000);
ax = canvas([x(:),x(:)],'-');

while 1
    LineDraw(ax,[x(:),sin(5*x(:))]);
    pause(1)
    Cascadefunctween(ax,ones(length(x),2)*x(1))
    LineDraw(ax,[x(:),x(:)]);
    pause(1)
    functween(ax,ones(length(x),2)*x(1))
    pause(1)
    %LineDraw(ax,NormPlot(subdat(:,2),1000))
    %LineDraw(ax,x')
end


%% Can this do bars?
% Yes it can holy shit...
x = 1:5;
y = 5 * (rand(1,5));
ax = bar(x,y)
ylim([0,6])
xlim([0,6])

while 1
    y = 5*rand(1,5);
    functween(ax,[x(:),y(:)])
    pause(.25)
end
% while 1
%     y = 5*rand(1,5);
%     LineDraw(ax,[x(:),y(:)]);
%     pause(.25)
% end

%% Okay, a bit of a jump
% I wanna be able to draw out phase portraits because I'm in a small
% diffeqs phase at the moment... I wanna start out with a system of linear
% differential equations that is derived from a single homogeneous second
% order linear differential equation... I'm PRETTY SURE that means that
% it'll take the form of 
%   [x' ]  = [0 1] * [x']
%   [x'']    [a b]   [x ] 
% I don't know how I should do this... Should I simulate? Or should I solve
% analytically and plot? Let's try both...

% I also just realized I never tried to control 2 graphs independently on
% one single plot yet... Nuts...

[pointsx,pointsy] = ndgrid(linspace(-5,5,10),linspace(-5,5,10));

x_0 = 3;
x1_0 = 2;
xinit = [x_0;x1_0];
system = [0,1;-1,-2];
allpath = {};
for j = 1:size(pointsx,2)
    for i = 1:size(pointsx,1)
        xinit = [pointsx(i,j),pointsy(i,j)];
        x = simDEQ(system,xinit,1,3000)';
        allpath{i,j} = x;
    end
end

% calculating eigens
[evec,evals] = eig(system);

ax = canvas(x,[-10,10],[-10,10],'-');
hold on;
ex = linspace(-10,10,100);
plot(ex,ex*(evec(2,1) / evec(1,1)),'LineWidth',2) %rise over run...
plot(ex,ex*(evec(2,2) / evec(1,2)),'LineWidth',2)
for i = 1:size(pointsx,1)
    for j = 1:size(pointsy,1)
        curx = allpath{i,j};
        ax = plot(curx(:,1),curx(:,1));
        LineDraw(ax,curx)
    end
end


%% I want to have all of them move at once...

[pointsx,pointsy] = ndgrid(linspace(-5,5,10),linspace(-5,5,10));

x_0 = 3;
x1_0 = 2;
xinit = [x_0;x1_0];
system = [0,1;-1,-3];
allpath = {};
for j = 1:size(pointsx,2)
    for i = 1:size(pointsx,1)
        xinit = [pointsx(i,j),pointsy(i,j)];
        x = simDEQ(system,xinit,3,3000)';
        allpath{i,j} = x;
    end
end

% calculating eigens
[evec,evals] = eig(system);

figure;
ax = blank(x,'-',[-10,10],[-10,10]);
hold on;
ex = linspace(-10,10,100);
plot(ex,ex*(evec(2,1) / evec(1,1)),'LineWidth',2) %rise over run...
plot(ex,ex*(evec(2,2) / evec(1,2)),'LineWidth',2)
axs = {};
for i = 1:size(pointsx,1)
    for j = 1:size(pointsy,1)
        curx = allpath{i,j};
        axs{i,j} = blank(curx,'-');
    end
end
xlim([-6,6])
ylim([-6,6])

axs = reshape(axs,1,[]);
allpath = reshape(allpath,1,[]);
while 1
    LineDraw2(axs,allpath,@LinCarv);
end

%% Redoing this except with only looking at the projection onto x
    [pointsx,pointsy] = ndgrid(linspace(-5,5,10),linspace(-5,5,10));

    x_0 = 3;
    x1_0 = 2;
    xinit = [x_0;x1_0];
    %system = [0,1;-4,-1];
    allpath = {};
    for j = 1:size(pointsx,2)
        for i = 1:size(pointsx,1)
            xinit = [pointsx(i,j),pointsy(i,j)];
            x = simDEQ(system,xinit,3,3000)';
            allpath{i,j} = x;
        end
    end
    
    figure;
    axs = {};
    ax = blank(x,'-',[-10,10],[-10,10]);
    hold on;
    for i = 1:size(pointsx,1)
        for j = 1:size(pointsy,1)
            curx = allpath{i,j};
            axs{i,j} = blank(curx,'-');
        end
    end
    
    allpath = reshape(allpath,1,[]);
    pathproj = {};
    t = linspace(0,3,3000);
    for i = 1:length(allpath)
        thispath = allpath{1,i};
        pathproj{1,i} = [t(:),thispath(:,1)];
    end
    xlim([0,3])
    ylim([-6,6])
    
    axs = reshape(axs,1,[]);
    while 1
        LineDraw2(axs,pathproj,@LinCarv);
    end

 %% Redoing this except with a nonlinear...
    [pointsx,pointsy] = ndgrid(linspace(-5,5,10),linspace(-5,5,10));
    x_0 = 3;
    x1_0 = 2;
    xinit = [x_0;x1_0];
    func1 = @(s) -1*s^2+1;
    func2 = @(s) s^2-s-1;
    allpath = {};
    for j = 1:size(pointsx,2)
        for i = 1:size(pointsx,1)
            xinit = [pointsx(i,j),pointsy(i,j)];
            x = simDEQ3({func1,func2},xinit,3,3000)'; % should spit out a xy function...
            allpath{i,j} = x;
        end
    end
    
    figure;
    axs = {};
    hold on;
    for i = 1:size(pointsx,1)
        for j = 1:size(pointsy,1)
            curx = allpath{i,j};
            axs{i,j} = blank(curx,'-');
        end
    end
    allpath = reshape(allpath,1,[]);
    axs = reshape(axs,1,[]);
    xlim([-10,10])
    ylim([-10,10])
    
    
    while 1
        LineDraw2(axs,allpath,@LinCarv);
    end

    %% Cool... I wanna do hodgekin huxley...
    % Okay, I guess while I was at it, I made the blank canvas function
    % like a million times better lol...
    %
    % axs = Preplot(allpath,'-');
    % LineDraw2(axs,allpath)
    %
    % Anyways
    
    [pointsx,pointsy,pointsz] = ndgrid(linspace(-5,5,10),linspace(-5,5,10),linspace(-5,5,10));
    func1 = @(s) (s(1)^2)/5;
    func2 = @(s) s(2)^2-1;
    func3 = @(s) s(3);
    allpath = {};
    for j = 1:size(pointsx,2)
        for i = 1:size(pointsx,1)
            xinit = [pointsx(i,j),pointsy(i,j),pointsz(i,j)];
            x = simDEQ3({func1,func2,func3},xinit,3,3000)'; % should spit out a xy function...
            allpath{i,j} = x;
        end
    end





    

% Something to solve diffeqs
% This specifically only solves systems of diffeqs in R2... I'm kinda
% certain that it CAN in theory do solutions in Rn, but obviously you can't
% visualize beyond three dimensions anyway...
% And even more specifically, only linear systems lmfao...
% I need something for nonlinear systems...
% Ah fuck... I want to make another one but for generalized functions, but
% adding in a function handle is wack... I also don't wanna make it all the
% fuck the way at the bottom of the script...
% Anonymous functions were apparently the answer, but cmon... Nobody
% actually knows how to use that shit...
function x = simDEQ(system,xinit,time,frames)     
    dt = time / frames;
    x = zeros(2,frames);
    x(:,1) = xinit;
    for i = 1:frames-1
        deriv = system * x(:,i);
        x(:,i+1) = x(:,i) + (dt*deriv);
    end
end

% Can only do 2 dims right now... Whoops... Second order nonlinear diffeqs
% are possible now though...
% FINE I'll generalize it...
function x = simDEQ2(func1,func2,xinit,time,frames)     
    dt = time / frames;
    x = zeros(2,frames);
    x(:,1) = xinit;
    for i = 1:frames-1
        deriv1 = func1(x(1,i));
        deriv2 = func2(x(2,i));
        x(1,i+1) = x(1,i) + (dt*deriv1);
        x(2,i+1) = x(2,i) + (dt*deriv2);
    end
end

% generalized...
function x = simDEQ3(funcs, xinit,time,frames)     
    dt = time / frames;
    x = zeros(length(funcs),frames);
    x(:,1) = xinit;
    for i = 1:frames-1
        for j = 1:length(funcs)
            thisfunc = funcs{j};
            deriv = thisfunc(x(:,i));
            x(j,i+1) = x(j,i) + (dt*deriv);
        end
    end
end

% I'm gonna make an improved version of my linedraw function. Basically, I
% want to upgrade it so that we can animate an entire cell of lines at
% once... I'll make it optional to have everything actually plot. That'll
% be a boolean value that I'll set... If it's set to zero, it'll just
% output a cell of animation "layers" that I'll have a separate animate
% function for... I think that animate function could end up being a heart
% of my code...

function frameSeq = LineDraw2(ax,endfunc,func,autoscale)
    if iscell(ax) && sum(size(ax)) > 2 %checking if there are multiple axes...
        multi = true;
    end
    if ~multi %if it's not multiple plots, just draw the line as is...
        frameSeq = LineDraw(ax,endfunc);
        return
    end
    if nargin == 2
        func = @InvCarv;
        autoscale = false;
    elseif nargin == 3
        autoscale = false;
    end
    
    %checking for autoscaling
    if autoscale
        for i = 1:length(endfunc)
            % TODO... I stopped because diffeqs can become infinite, so
            % whoopty do...
        end
    end

    frames = 100;
    c = 5; 
    
    % I have to loop through every axis in the ax cell...
    xFramCell = {};
    yFramCell = {};
    assert(iscell(endfunc))
    assert(iscell(ax))
    assert(length(endfunc) == length(ax))
    pdXCell = cell(1,length(endfunc));
    pdYCell = cell(1,length(endfunc));
    for j = 1:length(ax)
        %predetermining every point's movement
        thisendfunc = endfunc{1,j};
        xvec = thisendfunc(:,1)';
        yvec = thisendfunc(:,2)';
        predestX = repmat(xvec,frames,1);
        predestY = repmat(yvec,frames,1);
       
        predestX = func(predestX,frames);
        predestY = func(predestY,frames);

        pdXCell{1,j} = predestX;
        pdYCell{1,j} = predestY;
        frameSeq{1,j} = {predestX predestY};
    end

    % Okay, now that we looped through and got all the frame stacks, now we
    % can plot all the axes... one at a time...
    hold on;
    for i = 1:frames
        for j = 1:length(ax)
            predestX = pdXCell{1,j};
            predestY = pdYCell{1,j};
            set(ax{1,j},'XData',predestX(i,:),'YData',predestY(i,:))
        end
        drawnow
    end
end

% I call this below "carving"
% basically it takes the frame stack and carves out where the
% line should not be plotted based on that inverse function...
% Framestack must be in the format of frames x datalength matrix
function carve = LinCarv(framestack,frames)
    logvec = linspace(0,1,size(framestack,2));
    c = 5;
    for i = 1:frames
        dist = i/frames; % Should go 0-1
        framestack(i,logvec > dist) = NaN;
    end
    carve = framestack;
end

% Framestack must be in the format of frames x datalength matrix
function carve = InvCarv(framestack,frames)
    logvec = linspace(0,1,size(framestack,2));
    c = 5;
    for i = 1:frames
        dist = (1+(1/c)) - ((c+1)/(c*(c*(i/frames) + 1))); % Should go 0-1
        framestack(i,logvec > dist) = NaN;
    end
    carve = framestack;
end

% Line plot that draws a line lol...
% I wonder though... Should I interpolate so that I can use this generally?
% Nah, I should staircase it... I'll pass in the line function very
% explicitly and expect it to preserve the number of datapoints... Perhaps
% I'll make an augmentation of this in the future to only require 2 points
% and it'll draw a line between the two points that you pass in...
function frameSeq = LineDraw(ax,startfunc,endfunc)
    if nargin == 2 %Default usage. Basically requires no previous funcion
        endfunc = startfunc;
        startfunc(:,1) = ax.XData;
        startfunc(:,2) = ax.YData;
    end
    frames = 100;
    c = 5; 
    
    %predetermining every point's movement
    xvec = endfunc(:,1)';
    yvec = endfunc(:,2)';
    predestX = repmat(xvec,frames,1);
    predestY = repmat(yvec,frames,1);
    
    logvec = linspace(0,1,length(endfunc));
    for i = 1:frames
        dist = (1+(1/c)) - ((c+1)/(c*(c*(i/frames) + 1))); % Should go 0-1
        predestX(i,logvec > dist) = NaN;
        predestY(i,logvec > dist) = NaN;
    end

    for i = 1:size(predestX,1)
        set(ax,'XData',predestX(i,:),'YData',predestY(i,:))
        drawnow
    end
    frameSeq = {predestX,predestY};
end

function mask = Staircase(M,N)
    [rowIdx, colIdx] = ndgrid(1:M, 1:N);
    mask = rowIdx < colIdx * (M/N);
end

function ax = blank(func,str,x,y)
    if nargin == 2
        x = [-3,3];
        y = [-3,3];
    end
    
    siz = size(func,1);
    ax = plot(nan(1,siz),nan(1,siz),str);
    xlim(x);
    ylim(y);
end

function ax = Preplot(func,str,x,y)
    if nargin == 2
        x = [-3,3];
        y = [-3,3];
    end
    if iscell(func)
        multi = true;
    end
    gcf; %creates a figure if one doesn't already exist
    
    if multi
        ax = cell(1,length(func));
        for i = 1:length(func)
            siz = size(func{i},1);
            hold on;
            ax{i} = plot(nan(1,siz),nan(1,siz),str);
        end
        xlim(x)
        ylim(y)
    else
        siz = size(func,1);
        ax = plot(nan(1,siz),nan(1,siz),str);
        xlim(x);
        ylim(y);
    end
end

% Initializes the canvas
function ax = canvas(func,x,y,str)
    if nargin == 2
        str = x;
        x = [-3,3];
        y = [-3,3];
    elseif nargin == 3
        str = 'o';
        if isempty(x)
            x = [-3,3];
        end
    end
    if isempty(x)
        x = [-3,3];
    end
    if isempty(y)
        y = [-3,3];
    end

    figure;
    ax = plot(func(:,1),func(:,2),str);
    xlim(x)
    ylim(y)
end

% Basically, I want a function that takes in any given plot, normalizes it
% to be compatible to the 6x6 grid that I have... 
% Also, let's just have this make an explicit amount of samples as well
% just for convenience
function anifriend = NormPlot(func,samps)
    funx = linspace(-3,3,samps);
    func = double(func);
    normfunc = zscore(func);
    
    redfunc = interp1(linspace(-3,3,length(func))',normfunc,funx);
    anifriend = [funx(:),redfunc(:)];
end

function xy = readSVG(path,points)
    parts = loadsvg(path,.01,0);
    doublesvg = [];
    for i = 1:length(parts)
        doublesvg = [doublesvg; -1*parts{1,i}];
    end
    M = length(doublesvg(:,1));
    xi = linspace(1, M, points);
    x_downsampled = interp1(1:M, doublesvg(:,1), xi);
    M = length(doublesvg(:,2));
    xi = linspace(1, M, points);
    y_downsampled = interp1(1:M, doublesvg(:,2), xi);

    xy = [x_downsampled(:),y_downsampled(:)];
end

% how in the hell do I do this? Multithreading? Nah... Probably not. I
% don't want it to get that complicated... I'll start with something
% simple... I'll pass in two ax objects in a cell... I'll pass in the same
% thing with the startfunc and endfunc variables... a 2x1 cell that have
% two columns each...
function MultiCascade(ax,endfunc)
    startfunc = cell(1,length(ax));
    for j = 1:length(ax)
        currentAx = ax{j};
        startfunc{1,j} = [currentAx.XData',currentAx.YData'];
    end
    frames = 100;
    c = 5;
    

    xdistCell = cell(1,length(ax));
    ydistCell = cell(1,length(ax));
    pdCellx = cell(1,length(ax));
    pdCelly = cell(1,length(ax));

    % below must be done per axis object
    for j = 1:length(ax)
        subEnd = endfunc{1,j};
        subStart = startfunc{1,j};

        xdist = subEnd(:,1)-subStart(:,1);
        ydist = subEnd(:,2)-subStart(:,2);
        predestX = zeros(frames,length(subStart)); %predetermining every point's movement
        predestY = zeros(frames,length(subStart));
        for i = 1:frames
            dist = (1+(1/c)) - ((c+1)/(c*(c*(i/frames) + 1))); % Should go 0-1
            predestX(i,:) = subStart(:,1)+dist*xdist;
            predestY(i,:) = subStart(:,2)+dist*ydist;
        end
        predestX = [subStart(:,1)';predestX];
        predestY = [subStart(:,2)';predestY];
        
        % Storing the predestined paths per plot
        pdCellx{1,j} = predestX;
        pdCelly{1,j} = predestY;
    end

    stagXCell = cell(1,length(ax));
    stagYCell = cell(1,length(ax));
    for j = 1:length(ax)
        stagXCell{1,j} = stagger_matrix(pdCellx{1,j});
        stagYCell{1,j} = stagger_matrix(pdCelly{1,j});
    end
    
    for i = 1:size(stagXCell{1,1},1)
        for j = 1:length(ax)
            curStagX = stagXCell{1,j};
            curStagY = stagYCell{1,j};
            set(ax{1,j},'XData',curStagX(i,:),'YData',curStagY(i,:))
        end
        drawnow
    end
    
end



% Okay, so you actually don't really need a start func... Not anymore... If
% you have a startfunc, then it just assumes that whatever is currently
% plotted is the startfunc...
function Cascadefunctween(ax,startfunc,endfunc)
    if nargin == 2
        endfunc = startfunc;
        startfunc(:,1) = ax.XData;
        startfunc(:,2) = ax.YData;
    end
    frames = 100;
    c = 5;
    xdist = endfunc(:,1)-startfunc(:,1);
    ydist = endfunc(:,2)-startfunc(:,2);
    predestX = zeros(frames,length(startfunc)); %predetermining every point's movement
    predestY = zeros(frames,length(startfunc));
    for i = 1:frames
        dist = (1+(1/c)) - ((c+1)/(c*(c*(i/frames) + 1))); % Should go 0-1
        predestX(i,:) = startfunc(:,1)+dist*xdist;
        predestY(i,:) = startfunc(:,2)+dist*ydist;
        %set(ax,'XData',startfunc(:,1)+dist*xdist,'YData',startfunc(:,2)+dist*ydist)
    end
    predestX = [startfunc(:,1)';predestX];
    predestY = [startfunc(:,2)';predestY];

    stagX = stagger_matrix(predestX);
    stagY = stagger_matrix(predestY);
    for i = 1:size(stagX,1)
        set(ax,'XData',stagX(i,:),'YData',stagY(i,:))
        drawnow
    end
end

%Another chatGpt generation... I don't know how to make a clever
%interpolation function like this... I hope it'll work...
%goddamn... It worked... I'm impressed...
function [newfunc] = interpolateCurve(xy, Nnew)
    %xy = [x(:), y(:)];
    x = xy(:,1);
    y = xy(:,2);
    dxy = diff(xy);
    segment_lengths = sqrt(sum(dxy.^2,2));
    cumlen = [0; cumsum(segment_lengths)];
    totalLength = cumlen(end);
    tnew = linspace(0, totalLength, Nnew);
    xnew = interp1(cumlen, x(:), tnew)';
    ynew = interp1(cumlen, y(:), tnew)';
    newfunc = [xnew,ynew];
end

% This is a function that would stagger a matrix... it's for cascading...
% Cards on the table, I asked chatgpt to make this...
% Okay, not anymore... it's modded from chatgpt lol
function B = stagger_matrix(A)
    [N, M] = size(A);
    L = N + M - 1; % new length of staggered mat. I gotta change this if I'm gonna run this again...
    B = zeros(L, M);

    for col = 1:M
        idx = col;    % The diagonal position
        B(idx:N+idx-1, col) = A(:,col);
        if col ~= 1
            B(1:idx,col) = A(1,col);
        end
        if col ~= M
            B(idx+N:end,col) = A(end,col);
        end
    end
end



% I need to start off with tweening between two functions of the same
% length. 
% Each function needs a column of x and y 
function Sandfunctween(ax,startfunc,endfunc)
    frames = 100;
    c = 5;
    

    xdist = endfunc(:,1)-startfunc(:,1);
    ydist = endfunc(:,2)-startfunc(:,2);
    ax.XData = startfunc(:,1);
    ax.YData = startfunc(:,2);
    for j = 1:size(startfunc,1)
        for i = 1:frames
            dist = (1+(1/c)) - ((c+1)/(c*(c*(i/frames) + 1))); %should go from 0-1

            logicVec = zeros(size(startfunc,1),1);
            logicVec(j) = 1;
            set(ax,'XData',startfunc(:,1)+dist*xdist.*logicVec,'YData',startfunc(:,2)+dist*ydist.*logicVec)
            drawnow
        end
        startfunc(:,1) = ax.XData';
        startfunc(:,2) = ax.YData';
    end
end


% I wonder if I can actually get the axis data from here..
% the panto variable should be a 2x2 double matrix... 
% should be simple enough right?
function panCam(ax,panto)
    frames = 100;
    c = 5;
    curX = xlim(ax.Parent);
    curY = ylim(ax.Parent);
    xdist = panto(1,:)-curX;
    ydist = panto(2,:)-curY;
    for i = 1:frames
        dist = (1+(1/c)) - ((c+1)/(c*(c*(i/frames) + 1))); %should go from 0-1
        xlim(ax.Parent,curX + xdist*dist)
        ylim(ax.Parent,curY + ydist*dist)
        drawnow
    end
end


% I need to start off with tweening between two functions of the same
% length. 
% Each function needs a column of x and y 
function functween(ax,startfunc,endfunc)
    if nargin == 2
        endfunc = startfunc;
        startfunc(:,1) = ax.XData;
        startfunc(:,2) = ax.YData;
    end
    frames = 100;
    c = 5;  

    xdist = endfunc(:,1)-startfunc(:,1);
    ydist = endfunc(:,2)-startfunc(:,2);
    for i = 1:frames
        dist = (1+(1/c)) - ((c+1)/(c*(c*(i/frames) + 1)));
        
        set(ax,'XData',startfunc(:,1)+dist*xdist,'YData',startfunc(:,2)+dist*ydist)
        drawnow
    end
end

function pointtween(ax,startpoint,endpoint)
    frames = 100;
    c = 15;
    xdist = endpoint(1)-startpoint(1);
    ydist = endpoint(2)-startpoint(2);
    for i = 1:frames
        dist = (1+(1/c)) - ((c+1)/(c*(c*(i/frames) + 1)));
        
        set(ax,'XData',startpoint(1)+dist*xdist,'YData',startpoint(2)+dist*ydist)
        drawnow
    end
end
